var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _templateObject = _taggedTemplateLiteralLoose(['\n  // display: inline-flex;\n  display: inline-block;\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n'], ['\n  // display: inline-flex;\n  display: inline-block;\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n  ', '\n']);

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

import React from 'react';
import styled from 'styled-components';
import { space, width, alignSelf, color, hover, fontSize } from 'styled-system';
import * as feathers from 'react-feather';
import { Caret } from '../../icons';

var icons = _extends({}, feathers, {
  Caret: Caret
});

var capitalize = function capitalize(type) {
  return type.charAt(0).toUpperCase() + type.substring(1);
};

var Wrapper = styled.div(_templateObject, space, width, alignSelf, color, fontSize, hover);

var Icon = function Icon(_ref) {
  var type = _ref.type,
      size = _ref.size,
      color = _ref.color,
      rest = _objectWithoutProperties(_ref, ['type', 'size', 'color']);

  return React.createElement(
    Wrapper,
    _extends({ className: 'ri-icon', size: size, color: color }, rest),
    React.createElement(icons[type.split('-').map(function (t) {
      return capitalize(t);
    }).join('')], { size: size })
  );
};

export default Icon;