var _templateObject = _taggedTemplateLiteralLoose(['\n  font-family: ', ';\n  background: ', ';\n  color: ', ';\n  box-sizing: border-box;\n'], ['\n  font-family: ', ';\n  background: ', ';\n  color: ', ';\n  box-sizing: border-box;\n']);

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

import React from 'react';
import styled, { ThemeProvider } from 'styled-components';
import merge from 'deepmerge';
import base from './themes/base';
import { getColorShades, colorListToMap } from './themes/utils/colors';

// Check out https://github.com/jxnblk/styled-system/tree/master/system-components
// and https://github.com/pricelinelabs/design-system
var Wrapper = styled.div(_templateObject, function (props) {
  return props.theme.fonts.primary;
}, function (props) {
  return props.theme.colors.background;
}, function (props) {
  return props.theme.colors.text || props.theme.colors.gray[8];
});

var Theme = function Theme(_ref) {
  var _ref$theme = _ref.theme,
      theme = _ref$theme === undefined ? {} : _ref$theme,
      color = _ref.color,
      rest = _objectWithoutProperties(_ref, ['theme', 'color']);

  // Merge base theme and theme with palette
  // theme arrays will be overriden
  var merged = merge(base, theme, {
    arrayMerge: function arrayMerge(destination, source) {
      return source;
    }
  });

  if (color) {
    var primaryShades = getColorShades(color, 'primary');
    merged.colors.primary = primaryShades;
  }

  return React.createElement(
    ThemeProvider,
    { theme: merged },
    React.createElement(Wrapper, rest)
  );
};

export default Theme;